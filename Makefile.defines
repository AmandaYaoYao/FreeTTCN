#
# Copyright (C) 2007 Mateusz Pusz
#
# This file is part of freettcn (Free TTCN) project.

# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this file; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


# project name
PROJECT_NAME = freettcn

# software version
VERSION_1 = 0
VERSION_2 = 0
VERSION_3 = 1
VERSION = $(VERSION_1).$(VERSION_2).$(VERSION_3)

LIB_NAME = lib$(PROJECT_NAME)
LIB_ENV_NAME = lib$(PROJECT_NAME)env


#
# tools
#
MAKE = make
CPP = g++ -g -Wall
AR = ar -c
CD = cd
CP = cp
# LD = ld
RM = rm
LN = ln
SED = sed
ECHO = echo
TOUCH = touch
TAGS = etags --declarations --members
INSTALL = install
LDCONFIG = ldconfig
DOXYGEN = doxygen
TAR = tar


#
# directories
#
LIB_INSTALL_DIR = /usr/local/lib
H_INSTALL_DIR = /usr/local/include
LOCAL_FREETTCN_H_DIR = include/$(PROJECT_NAME)

# ifndef $(TOP_DIR)
# TOP_DIR = .
# endif

ifndef $(LONG_DIR_NAME)
LONG_DIR_NAME = .
endif

#
# varaibles
#
MAKEFLAGS += -rR --no-print-directory

ifeq ($(BUILD_VERBOSE),1)
  quiet =
  Q =
else
  quiet=quiet_
  Q = @
endif

# If the user is running make -s (silent mode), suppress echoing of commands
ifneq ($(findstring s,$(MAKEFLAGS)),)
  quiet=silent_
endif


#
# Command template
#
# If quiet is set, only print short version of command
#
cmd = $(subst ;;,;,$(if $($(quiet)$(1)),$(ECHO) "$($(quiet)$(1))" &&) $($(1));)



#
# Commands
#

# temporary commands used below
tmp_cmd_d    = $(CP) $*.d_ $*.d && \
               $(SED) -e 's/\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $*.d_ >> $*.d && \
	       $(RM) -f $*.d_

# start compilation
quiet_cmd_make = MAKE $(LONG_DIR_NAME)/$(2)
      cmd_make = $(MAKE) -C $(2) DIR_NAME=$(2) LONG_DIR_NAME=$(LONG_DIR_NAME)/$(2) all

# start instalation
quiet_cmd_make_install = MAKE_INSTALL $(LONG_DIR_NAME)/$(2)
      cmd_make_install = $(MAKE) -C $(2) DIR_NAME=$(2) LONG_DIR_NAME=$(LONG_DIR_NAME)/$(2) install

# start module compilation
quiet_cmd_make_mod = MAKE_MOD $(BIN_DIR)/$(patsubst %.ttcn,%.o,$(2))
      cmd_make_mod = $(MAKE) -C $(MODULES_DIR) MODULE=$(2) mod

# clean
quiet_cmd_make_clean = MAKE_CLEAN $(LONG_DIR_NAME)/$(2)
      cmd_make_clean = $(MAKE) -C $(2) DIR_NAME=$(2) LONG_DIR_NAME=$(LONG_DIR_NAME)/$(2) clean

# distclean
quiet_cmd_make_distclean = MAKE_DIST_CLEAN $(LONG_DIR_NAME)/$(2)
      cmd_make_distclean = $(MAKE) -C $(2) DIR_NAME=$(2) LONG_DIR_NAME=$(LONG_DIR_NAME)/$(2) distclean

# compile source file, create depend file *.d, insert *.o file to library <bindir>\<dirname>.a
quiet_cmd_cc_d_a = CC_D_A     $<
      cmd_cc_d_a = $(CPP) $(CPPFLAGS) -MD -MF $*.d_ $(INCLUDE_DIRS) -c $< -o $(@D)/$% && \
	           $(AR) -rs $@ $(@D)/$% && \
                   $(RM) -f $(@D)/$% && \
                   $(SED) -i 's,^.*/\(.*\.o\):,$(LIB_PATH)(\1):,' $*.d_ && \
                   $(tmp_cmd_d)

# compile source file, create depend file *.d
quiet_cmd_cc_d_o = CC_D_O     $<
      cmd_cc_d_o = $(CPP) -MD -MF $*.d_ $(INCLUDE_DIRS) -c $< -o $@ && \
                   $(tmp_cmd_d)

# translate source TTCN module file to *.cpp
quiet_cmd_ttcn_cc = TTCN_CC    $<
      cmd_ttcn_cc = $(TOUCH) $@


# link library
quiet_cmd_lib_link = LINK $(BIN_DIR)/$(LIB_FULL_NAME)
#      cmd_lib_link = $(LD) -shared -export-dynamic -soname $(LIB_FILE_NAME).so.$(VERSION_1) -o $(BIN_DIR)/$(LIB_FULL_NAME) -whole-archive $(INCLUDE_LIBS)
      cmd_lib_link = $(CD) $(BIN_DIR) && \
                     $(RM) -f *.o && \
                     $(foreach lib,$(INCLUDE_LIBS),$(AR) -x $(lib);); \
                     $(CPP) -shared -Wl,-export-dynamic,-soname,$(LIB_FILE_NAME).so.$(VERSION_1) -o $(LIB_FULL_NAME) *.o && \
		     $(RM) -f *.o

# link example
quiet_cmd_example_link = LINK       $(BIN_DIR)/$(PROG_NAME)
      cmd_example_link = $(CPP) $(O_FILES) $(MODULES_O_FILES) -l$(PROJECT_NAME) -l$(PROJECT_NAME)env -o $(BIN_DIR)/$(PROG_NAME)

# install library
quiet_cmd_lib_install = INSTALL $(LIB_FULL_NAME)
      cmd_lib_install = $(INSTALL) -p $(BIN_DIR)/$(LIB_FULL_NAME) $(LIB_INSTALL_DIR) && \
		        $(LDCONFIG) -n $(LIB_INSTALL_DIR) && \
			$(LN) -sf $(LIB_FILE_NAME).so.$(VERSION_1) $(LIB_INSTALL_DIR)/$(LIB_FILE_NAME).so

# header install
quiet_cmd_h_install = INSTALL_H
      cmd_h_install = $(INSTALL) -d $(addprefix $(H_INSTALL_DIR)/$(PROJECT_NAME)/, $(BUILD_DIRS)) && \
                      $(foreach dir, $(BUILD_DIRS), $(INSTALL) -p -m 644 $(LOCAL_FREETTCN_H_DIR)/$(dir)/*.h $(H_INSTALL_DIR)/$(PROJECT_NAME)/$(dir);)

# make distribution
quiet_cmd_dist = MAKE_DIST
      cmd_dist = $(TAR) -cvz --exclude ".svn" -f ../$(PROJECT_NAME)-$(VERSION).tar.gz . 

# # make tags
# quiet_cmd_tags = TAGS
#       cmd_tags = $(TAGS) --append --output=$(TAG_DIR)/TAGS $(LIB_H_FILES_PATH)/*.h $(H_FILES_PATH)/*.h *.cpp
