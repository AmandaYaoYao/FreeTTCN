module icmp {
  
  modulepar {
    boolean long;
    integer runCount := 1 + 2;
  }
  
  const integer RETRY_NUM := 5;
  const float MSG_TIMEOUT := 1.0, TEST_TIMEOUT := 3.0, TESTS_DELAY := 1.0;

  
  // ********** TYPES ***********
  
  type record ICMPPingDataType
  {
    integer id,
    integer seqNumber,
    octetstring data optional
  }
  
  type record ICMPMsg
  {
    integer msgType,
    integer code,
    integer crc,
    ICMPDataType data
  }
  
  type union ICMPDataType
  {
    ICMPPingDataType1 ping
  }
  
  
  // ********** PORTS ***********
  
  type port ICMPPort message
  {
    inout ICMPMsg;
  }
  
  
  // ********** COMPONENTS ***********
  
  type component ICMPComponent
  {
    port ICMPPort icmpPort;
  }
  
  type component IPStack
  {
    port ICMPPort icmpPort;
  }
  
  
  // ********** TEMPLATES ***********
  
  template ICMPMsg t_EchoRequest(integer seqNum) :=
  {
    msgType := 8,
    code    := 0,
    crc     := 0,
    data    :=
    {
      ping :=
      {
        id         := 1234,
        seqNumber  := seqNum,
        data       := omit
      }
    }
  }
  
  template ICMPMsg t_EchoReply(ICMPMsg echoReq) :=
  {
    msgType := 0,
    code    := 0,
    crc     := ?,
    data    := echoReq.data
  }
  
  
  // ********** TEST CASES ***********
  
  testcase TC_ICMPPing_1() runs on ICMPComponent system IPStack
  {
    // init connections
    map(mtc:icmpPort, system:icmpPort);
    
    // the test case behaviour
    timer t := MSG_TIMEOUT;
    var integer count := 0;
    icmpPort.send(t_EchoRequest(count));
    t.start;
    alt {
      [] icmpPort.receive(t_EchoReply(t_EchoRequest(count))) {
        setverdict(pass);
      }
      [] icmpPort.receive {
        setverdict(fail);
      }
      [count < RETRY_NUM] t.timeout {
        count := count + 1;
        icmpPort.send(t_EchoRequest(count));
        repeat;
      }
      [count == RETRY_NUM] t.timeout {
        setverdict(fail);
      }
    }
    
    log("Count: ", int2str(count));
    
    // destroy connections
    unmap(mtc:icmpPort, system:icmpPort);
  }
  
  testcase TC_ICMPPing_2() runs on ICMPComponent
  {
  }
  
  
  // ********** CONTROL ***********
  
  control {
    if (execute(TC_ICMPPing_1()) == pass and long) {
      for (var integer i:=0; i<runCount; i:=i+1) {
        execute(TC_ICMPPing_2(), TEST_TIMEOUT);
        timer t1 := TESTS_DELAY;
        t1.start;
        t1.timeout;  // pause before executing the next test case
      }
    }
  }
}
